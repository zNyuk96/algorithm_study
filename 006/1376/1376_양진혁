#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int N, M;
vector<vector<int>> edge;
vector<vector<int>> edge_backup;

void visit_handler(int next) {
	//edge[next]에 있는 cur로 가는 녀석들 전부 가져와서 erase 해줘야함.
	//지워야하는 큐에 edge[next]의 목적지들 elem 들을 가져와서 edge[elem]에서 next를 삭제하는 식으로 진행시켯!
	for (int i = 0; i < edge_backup[next].size(); i++) {
		//edge[edge[next][i]].find
		int elem = edge_backup[next][i];
		int s = 0;
		int e = edge[elem].size() - 1;
		while (e > s) {
			int m = s + e >> 1;
			if (edge[elem][m] < next) s = m + 1;
			else e = m;
		}
		if (e>=0 && edge[elem][e] == next) {
			edge[elem].erase(edge[elem].begin() + e);
		}
	}
}
void MFS(int cur) {
	cout << cur << " ";
	while (edge[cur].size() > 0) {
		if (edge[cur].size() % 2) { // 홀
			int next = edge[cur][edge[cur].size() / 2];
			visit_handler(next);
			MFS(next);
		}
		else {
			int next = edge[cur][0];
			visit_handler(next);
			MFS(next);
		}
	}
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> N >> M;
	if (N == 0) return 0;
	else if (M == 0) return 0;
	edge.assign(100001, vector<int>());
	edge_backup.assign(100001, vector<int>());
	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		if (a == b) continue;
		int s = 0;
		int e = edge[a].size() - 1;
		while (e > s) {
			int m = s + e >> 1;
			if (edge[a][m] < b) s = m + 1;
			else e = m;
		}
		if (e >= 0 && edge[a][e] == b) continue;
		edge[a].push_back(b);
		edge_backup[a].push_back(b);
		if (a != b) {
			edge[b].push_back(a);
			edge_backup[b].push_back(a);
		}
	}
	for (int i = 1; i <= N; i++) {
		sort(edge[i].begin(), edge[i].end());
	}
	visit_handler(1);
	MFS(1);
}

//visited 를 구현하는데에 어려움이 좀 있네.. a 를 방문하면 최대 10만개의 노드에 업데이트를 해줘야하는데.. 불가능하네
//업데이트의 비용이 NlogN이어도 엄청 큰 부담이다.
//그게아니지 a 방문하면 edge(a) 에서 전부 pop해서 pop의 결과물들에서 binary search 통해서 edge값 없애주면 되네.
//worst case에서는 동일할수도 있지만 일단 해보자
