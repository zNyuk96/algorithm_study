#pragma warning (disable : 4996)
#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <limits.h>
#include <math.h>
#include <numeric>

int N, M;
std::vector< std::vector<int> > map;
//island_loc[x][b] x번 섬의 좌표들
std::vector< std::vector< std::pair<int, int> > > island_loc;
std::vector< std::vector<bool> > visited;

std::vector<bool> visited_Node;
std::vector< std::vector<int> > is_connected;
int sum;

int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };

std::vector< std::vector<int> > weight;

int ans = INT_MAX;


void find_distance() {
    for (int k = 0; k < island_loc.size(); k++) {
        for (int num = 0; num < island_loc[k].size(); num++) {
            int x = island_loc[k][num].first;
            int y = island_loc[k][num].second;
            for (int dir = 0; dir < 4; dir++) {
                int nx = x;
                int ny = y;
                while (1) {
                    nx += dx[dir];
                    ny += dy[dir];
                    if (nx < 0 || nx >= N || ny < 0 || ny >= M) break;
                    if (map[nx][ny] == k) break;
                    else if (map[nx][ny] != -1) {
                        weight[map[nx][ny]][k] = weight[k][map[nx][ny]] = std::min(abs((nx - x) + (ny - y)) >= 3 ? abs((nx - x) + (ny - y)) - 1 : INT_MAX, weight[k][map[nx][ny]]);
                        break;
                    }
                }
            }
        }
    }
}

void dfs(int node) {
    visited_Node[node] = true;

    for (int k = 0; k < island_loc.size(); k++) {
        if (!visited_Node[k] && is_connected[node][k]) {
            sum += is_connected[node][k];
            dfs(k);
        }
    }
}

void ret_ans() {
    std::vector< std::pair<int, int> > bridge;
    for (int i = 0; i < island_loc.size(); i++) {
        for (int j = i + 1; j < island_loc.size(); j++) {
            if (weight[i][j] != INT_MAX) bridge.emplace_back(std::make_pair(i, j));
        }
    }

    for (int k = 0; k < (1 << bridge.size()); k++) {
        visited_Node.assign(island_loc.size(), false);
        is_connected.assign(island_loc.size(), std::vector<int>(island_loc.size(), 0));
        sum = 0;

        for (int i = 0; i < bridge.size(); i++) {
            //이 브릿지 쓸거니?
            if (k & (1 << i)) {
                is_connected[bridge[i].first][bridge[i].second] = is_connected[bridge[i].second][bridge[i].first] = weight[bridge[i].second][bridge[i].first];
            }

        }

        dfs(0);

        if (std::accumulate(visited_Node.begin(), visited_Node.end(), 0) == island_loc.size()) {
            ans = std::min(ans, sum);
        }

    }
    
}

void calculate(int i, int j) {
    std::vector< std::pair<int, int> > island_loc_tmp;
    std::queue< std::pair<int, int> > q;
    q.emplace(std::make_pair(i, j));
    map[i][j] = island_loc.size();
    visited[i][j] = true;
    island_loc_tmp.emplace_back(std::make_pair(i, j));

    while (!q.empty()) {
        auto front = q.front();
        q.pop();

        for (int k = 0; k < 4; k++) {
            int nx = front.first + dx[k];
            int ny = front.second + dy[k];

            if (nx >= 0 && nx < N && ny >= 0 && ny < M) {
                if (!visited[nx][ny] && map[nx][ny] != -1) {
                    visited[nx][ny] = true;
                    island_loc_tmp.emplace_back(std::make_pair(nx, ny));
                    map[nx][ny] = island_loc.size();
                    q.emplace(std::make_pair(nx, ny));
                }
            }
        }
    }

    island_loc.emplace_back(island_loc_tmp);
}

int main() {
    scanf("%d %d", &N, &M);
    map.assign(N, std::vector<int>(M, 0));
    visited.assign(N, std::vector<bool>(M, false));
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            scanf("%d", &map[i][j]);
            if (map[i][j] == 0) map[i][j]--;
        }
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (map[i][j] != -1 && !visited[i][j]) {
                calculate(i, j);
            }
        }
    }
    weight.assign(island_loc.size(), std::vector<int>(island_loc.size(), INT_MAX));
    find_distance();
    ret_ans();
    printf("%d", ans == INT_MAX? -1: ans);
}